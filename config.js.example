/* eslint-disable max-len */
const config = {
  token: '',
  
  // MongoDB URI
  mongoURI: 'mongodb://user:pass@127.0.0.1:27017/?authSource=authdbname',

  // Twitter
  twitterAPIKey: '',
  twitterAPISecret: '',
  twitterAccessToken: '',
  twitterAccessTokenSecret: '',
  followedTwitterUsers: [],

  // YouTube
  youtubeAPIKey: '',

  // Webhooks
  twitterHookID: '',
  twitterHookToken: '',

  // Raid Settings
  raidJoinsPerSecond: 10,
  raidJoinCount: 10,

  // Settings
  prefix: '.',
  verifiedRole: 'role ID',
  mutedRole: 'role ID',
  tradeRole: 'role ID',
  voiceRole: 'role ID',
  reddRole: 'role ID',
  headReddRole: 'role ID',
  modRole: 'role ID',
  headModRole: 'role ID',
  adminRole: 'role ID',
  staffChat: 'channel ID',
  modMail: 'channel ID',
  reportMail: 'channel ID',
  actionLog: 'channel ID',
  joinLeaveLog: 'channel ID',
  modLog: 'channel ID',
  musicText: 'channel ID',
  music: 'channel ID',
  sesReqText: 'channel ID',
  sesCategory: 'channel ID',
  calendar: 'channel ID',
  mainGuild: 'guild ID',
  modMailGuild: 'guild ID',
  modMailReddRole: 'role ID',
  modMailModRole: 'role ID',
  modMailHeadModRole: 'role ID',
  modMailAdminRole: 'role ID',

  // Image-Only channels
  imageOnlyChannels: ['channelID'],

  // Newline Limit Settings
  newlineLimitChannels: [],
  newlineLimit: 10,
  imageLinkLimit: 3,

  // No-Mention channels
  noMentionChannels: ['channelID'],

  // Reputation Settings
  negativeRepLimit: 20,
  positiveRepLimit: 20,

  banAppealLink: 'LINK',

  // UserDB
  userDBDefaults: {
    friendcode: '',
    island: {
      islandName: '',
      fruit: '',
      characterName: '',
      hemisphere: '',
      profileName: '',
      dreamAddress: '',
    },
    positiveRep: 0,
    negativeRep: 0,
    posRepList: [],
    negRepList: [],
    roles: [],
    nicknames: [],
    usernames: [],
    infractions: [],
    lastMessageTimestamp: 0,
  },

  // Bot Perms and Stuff
  ownerID: 'userID',

  admins: ['userID', 'userID'],

  ignoreMember: ['userID'],

  ignoreChannel: ['channelID'],

  support: ['userID', 'userID'],

  // Guild Perms and Stuff
  permLevels: [
    {
      level: 0,
      name: 'User',
      check: () => true,
    },
    {
      level: 1,
      name: 'Verified',
      check: (client, message) => {
        if (message.guild) {
          const verifiedRoleObj = message.guild.roles.cache.get(config.verifiedRole);

          if (verifiedRoleObj && message.member.roles.cache.has(verifiedRoleObj.id)) {
            return true;
          }
        }
        return false;
      },
    },
    {
      level: 2,
      name: 'Redd',
      check: (client, message) => {
        if (message.guild) {
          const reddObj = message.guild.roles.cache.get((message.guild.id === config.modMailGuild) ? config.modMailReddRole : config.reddRole);

          if (reddObj && message.member.roles.cache.has(reddObj.id)) {
            return true;
          }
        }
        return false;
      },
    },
    {
      level: 3,
      name: 'Head Redd',
      check: (client, message) => {
        if (message.guild) {
          const headReddObj = message.guild.roles.cache.get(config.headReddRole);

          if (headReddObj && message.member.roles.cache.has(headReddObj.id)) {
            return true;
          }
        }
        return false;
      },
    },
    {
      level: 4,
      name: 'Mod',
      check: (client, message) => {
        if (message.guild) {
          const modRoleObj = message.guild.roles.cache.get((message.guild.id === config.modMailGuild) ? config.modMailModRole : config.modRole);

          if (modRoleObj && message.member.roles.cache.has(modRoleObj.id)) {
            return true;
          }
        }
        return false;
      },
    },
    {
      level: 5,
      name: 'Head Mod',
      check: (client, message) => {
        if (message.guild) {
          const headModRoleObj = message.guild.roles.cache.get((message.guild.id === config.modMailGuild) ? config.modMailHeadModRole : config.headModRole);

          if (headModRoleObj && message.member.roles.cache.has(headModRoleObj.id)) {
            return true;
          }
        }
        return false;
      },
    },
    {
      level: 6,
      name: 'Admin',
      check: (client, message) => {
        if (message.guild) {
          const adminRoleObj = message.guild.roles.cache.get((message.guild.id === config.modMailGuild) ? config.modMailAdminRole : config.adminRole);

          if ((adminRoleObj && message.member.roles.cache.has(adminRoleObj.id)) || message.member.hasPermission('ADMINISTRATOR')) {
            return true;
          }
        }
        return false;
      },
    },
    {
      level: 7,
      name: 'Server Owner',
      check: (client, message) => {
        if (message.guild && message.author.id === message.guild.ownerID) {
          return true;
        }
        return false;
      },
    },
    {
      level: 8,
      name: 'Bot Support',
      check: (client, message) => config.support.includes(message.author.id),
    },
    {
      level: 9,
      name: 'Bot Admin',
      check: (client, message) => config.admins.includes(message.author.id),
    },
    {
      level: 10,
      name: 'Bot Owner',
      check: (client, message) => config.ownerID === message.author.id,
    },
  ],
};

module.exports = config;
